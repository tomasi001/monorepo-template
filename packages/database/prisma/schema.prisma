// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthCheck {
  id        String   @id @default(cuid())
  status    String
  checkedAt DateTime @default(now())
}

model Menu {
  id            String     @id @default(cuid())
  name          String
  qrCode        String     @unique
  qrCodeDataUrl String
  items         MenuItem[]
  orders        Order[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model MenuItem {
  id          String      @id @default(cuid())
  menuId      String
  menu        Menu        @relation(fields: [menuId], references: [id])
  name        String
  description String?
  price       Float
  available   Boolean     @default(true)
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id        String      @id @default(cuid())
  menuId    String
  menu      Menu        @relation(fields: [menuId], references: [id])
  items     OrderItem[]
  status    String      @default("PENDING") // PENDING, CONFIRMED, COMPLETED, CANCELLED
  total     Float
  payment   Payment?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id                String   @id @default(cuid())
  orderId           String   @unique
  order             Order    @relation(fields: [orderId], references: [id])
  amount            Float
  status            String   @default("PENDING") // PENDING, SUCCESSFUL, FAILED
  paystackReference String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String   @default("super_admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commission {
  id         String   @id @default(uuid())
  percentage Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
